package contrarreloj;

/**
 * declaramos aquí un nuevo objeto dorti  ( dorsal-tiempo)
 * y la tabla de clasificacion que es un array de dortis
 */
public class Dorti {
    // atributos
    int dorsal;
    int tiempo;

    // metodo constructor 
    public Dorti(int dorsal, int tiempo) {
        this.dorsal = dorsal;
        this.tiempo = tiempo;
    }

    public static void inicializar(Dorti aaa[]) {

        /* le paso un dorsal, un tiempo, y lo pone en el array de clasificacion en la última celda libre */
        for (int i = 0; i < aaa.length; i++) {
            aaa[i] = new Dorti(888, -1);

        }
    }

    public static int clasificar(int dorsal, int tiempo, Dorti aaa[], int llegados) {

        /* le paso un dorsal, un tiempo, y lo pone en el array de clasificacion en la última celda libre */
        
        aaa[llegados].dorsal = dorsal;

        aaa[llegados].tiempo = tiempo;
        
        /* ahora ordena el array por el tiempo , método de los jugadores de cartas 
        /* y devuelve en que puesto quedó */
        /* aun no está implementado la ordenación */ 
        
        
        return (llegados);

    }
    
    public static boolean buscarDorsal(Corredor acorredores[], Dorti contrarreloj[], int aux_aco, int aux_con, int dorsal){
        //le paso los dos arrays y el dorsal que he introducido para buscarlo
        boolean encontrado=false;
        int i , j;
    
            for(i=0; (i<acorredores.length) && (encontrado == false); i++){
                    
                if (acorredores[i].dorsal == dorsal) {  //si está registrado
                    //una vez que encuentra el dorsal registrado comprueba si ha participado
                    aux_aco = i;
                    
                    for (j=0; j<contrarreloj.length; j++){
                            
                        if (contrarreloj[j].dorsal == dorsal){  //si ha participado
                        aux_con = j;
                        encontrado = true;
                        }
                        
                    }
                }
        
            }
        return encontrado;  //devuelve encontrado: true si se encontró con éxito y false si no se encontró
    }
    
    public static boolean buscarEquipo (Corredor acorredores[], Dorti contrarreloj[], String equipo, int aux_aco, int aux_con, int tiempo_que_hizo) {
        boolean encontrado = false;
        int dorsal;
        int i, j;

                for(i=0; (i<acorredores.length) && (encontrado == false); i++){
                    
                    if ((acorredores[i].equipo).equals(equipo)) {       //si está registrado
                        aux_aco = i;
                        encontrado = true;
                        dorsal = acorredores[i].dorsal;
                        
                        for (j=0; j<contrarreloj.length; j++){
                        
                            if (contrarreloj[j].dorsal==dorsal){        //una vez que lo encuentro anoto el tiempo de este dorsal (osea corredor)
                                aux_con = j;
                                tiempo_que_hizo = contrarreloj[j].tiempo;   //pongo el tiempo que hizo en la variable
                            }
                        
                        }
                    }
                    //una vez que encuentro el equipo anoto el dorsal del corredor asociado
                    //lo busco en el otro array

                }       /* devuelvo el booleano de encontrado y las variables dorsal y tiempo_que_hizo (tiempo que
                que hizo el ciclista que corresponde al equipo) ya con los valores que buscó y guardó el método*/
        return encontrado;
    }
    
    public static void ordenarClasificacionTiempo(Dorti aaa[], Dorti aux, int llegados) {
        for (int i = 0; i <=llegados; i++){
            int pos = i;
            aux.tiempo = aaa[i].tiempo;                                     //Creo la variable aux temporal donde se guarda el dato
            aux.dorsal = aaa[i].dorsal;
            
            while ((pos>0) && (aaa[pos-1].tiempo>aux.tiempo)){              //Ordena el array aaa por tiempo
                aaa[pos] = aaa[pos-1];
                pos--;
            }
            aaa[pos]=aux;
        }
    }
    
    
    
    public static void mostrarClasificacion(Dorti aaa[], int llegados) {

        for (int p = 0; p <= llegados; p ++) {
            System.out.println(" * - * - * - * ");
            System.out.println(p +" : " + aaa[p].dorsal + " >> " + aaa[p].tiempo);
        }
        System.out.println(" * - * - * - * ");

    }


}
