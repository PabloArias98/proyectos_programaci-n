package contrarreloj;
import java.util.Scanner;

public class Contrarreloj {

    /**
     *
     * @param args
     */
    
    /* Voy a utilizar dos variables aux_aco y aux_con que me valdrán para guardar las posiciones donde coincidan datos
    como puede ser el nombre del equipo de un jugador o el dorsal de este */
   
    public static void main(String[] args) {
        
        
        Scanner entrada = new Scanner(System.in);   //inicializamos Scanner
        
        
        //variables globales
        int opcion, dorsal=-1, tiempo=999999, tiempo_que_hizo;   //inicializo tiempo también
        String equipo;
        int llegados = 0;   // corredores llegados
        int i, j, aux_aco=0, aux_con=0;  //inicializo las variables de control de los for i e j y las de guardar posiciones
        boolean encontrado;
        
        //#####################################################
        
        Corredor acorredores[] = new Corredor[3];   // el array de los corredores inscritos
        
        Dorti contrarreloj[] = new Dorti [3];   // el array secundario, el que se ordena (dorsal y tiempo)
        
        Dorti ciclista_meta = new Dorti(dorsal, tiempo);  //este es un objeto auxiliar, que usaré para ordenar
        
        //#####################################################
        
        // cargar los datos de los corredores
        
        Corredor.cargarDatos(acorredores); // rellena el array  acorredores
        
        Dorti.inicializar(contrarreloj); // rellena el array contrarreloj
        
        opcion = Corredor.menu(); // invocar el menú

        while (opcion != 99) {
            switch (opcion) {

                case 0:  // meter más datos de corredores, opcion oculta
                    break;
                case 1:  // mostrar la clasificación
                    Dorti.mostrarClasificacion(contrarreloj, llegados);                   
                    break;
                case 2: // libre
                    break;
                    
                case 3: // anotar la llegada de un corredor
                    System.out.println("Introduzca la llegada de un corredor");
                    System.out.print("El dorsal: ");
                    dorsal = entrada.nextInt();
                    System.out.println("El tiempo: ");
                    tiempo = entrada.nextInt();
                    
                    Dorti.clasificar(dorsal, tiempo, contrarreloj, llegados);
                    
                    //cada vez que metemos un ciclista nuevo ordenamos
                    Dorti.ordenarClasificacionTiempo(contrarreloj, ciclista_meta, llegados);
                    /* algo tengo mal en el metodo ordenar que luego cuando le pido al programa que me muestre la tabla 
                    no me muestra el dorsal del ciclista que metí antes
                    ahora arreglé algo, parece que va pero meto un ciclista nuevo y me lo sobrescribe
                    Se actualiza llegados cada vez que hay un corredor nuevo en la meta */
                    llegados++;
                    // (...)
                    break;
                case 4:
                    // libre
                    break;
                    
                    
                case 5: // mostrar la información de un corredor
                System.out.println("Introduzca el dorsal: ");
                dorsal = entrada.nextInt();             //dorsal = leer dorsal();
                
                //llamo al método buscarDorsal, le paso los dos arrays y el dorsal que introducí
                
                encontrado = Dorti.buscarDorsal(acorredores, contrarreloj, aux_aco, aux_con, dorsal);
                //aquí si finalmente encuentra o no el dorsal, la variable encontrado recibirá un true o false
                
                if (encontrado==true){
                //si lo ha encontrado tendré las posiciones de nombre, equipo, tiempo etc...
                System.out.println("Datos del corredor de la dorsal "+acorredores[aux_aco].dorsal+"\n"
                        + "Nombre: "+acorredores[aux_aco].nombre+" \n"
                        + "Equipo: "+acorredores[aux_aco].equipo+" \n"
                        + "Tiempo: "+contrarreloj[aux_con].tiempo+" \n"
                        + "Tiempo que está del primero: "+(contrarreloj[aux_con].tiempo-contrarreloj[0].tiempo)+" segundos");
                }
                
                else {
                System.out.println("Error: ha introducido un dorsal inválido");
                
                }
                
                break;
                
                case 6: // libre
                
                break;
                    
                case 7: // mostrar la lista de corredores de la carrera
                    Corredor.mostrarDatos(acorredores);
                    
                    break;
                case 8:// mostrar equipos participantes
                    System.out.println("Lista de equipos participantes:");
                    
                    for (i=0; i<=acorredores.length; i++){
                        System.out.println("Equipo: "+acorredores[i].equipo);
                    }
                    
                    break;
                case 9: // mostrar información de un equipo
                    
                    System.out.println("Introduzca tu equipo: ");
                    equipo = entrada.nextLine();

                tiempo_que_hizo=999999999;

                /*llamo al método buscarEquipo, también le envio los parámetros dorsal y tiempo_que_hizo
                que los que el método nos dará los valores deseados, correspondientes al ciclista que pertenece
                al equipo buscado*/

                encontrado = Dorti.buscarEquipo(acorredores, contrarreloj, equipo, aux_aco, aux_con, tiempo_que_hizo);
                //según el equipo fuese encontrado (true) o no (false):
                
                if(encontrado==true){
                //tengo un problema con la variable tiempo_que_hizo
                System.out.println("Datos del equipo "+acorredores[aux_aco].equipo+"\n"
                        + "Nombre del corredor: "+acorredores[aux_aco].nombre+" \n"
                        + "Tiempo que hizo: "+tiempo_que_hizo+" \n"
                        + "Dorsal: "+acorredores[aux_con].dorsal);
                }
                
                else {
                    System.out.println("ERROR: Ha introducido un equipo inválido");
                }
                
                
                break;
                default:
                    System.out.println("Ha introducido una opción inválida, enseguida será retornado al menú");
                    // podemos mostrar un mensaje de error
                    break;
            } // fin del switch

            opcion = Corredor.menu();

        } // del while 
    } // fin del main

} // fin de la class
